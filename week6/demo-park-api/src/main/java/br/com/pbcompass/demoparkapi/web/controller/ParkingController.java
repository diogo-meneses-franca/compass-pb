package br.com.pbcompass.demoparkapi.web.controller;

import br.com.pbcompass.demoparkapi.entity.Parking;
import br.com.pbcompass.demoparkapi.service.ParkingLotService;
import br.com.pbcompass.demoparkapi.service.ParkingService;
import br.com.pbcompass.demoparkapi.web.dto.PageableMapper;
import br.com.pbcompass.demoparkapi.web.dto.PageableResponseDto;
import br.com.pbcompass.demoparkapi.web.dto.mapper.ParkingMapper;
import br.com.pbcompass.demoparkapi.web.dto.parking.ParkingCreateDto;
import br.com.pbcompass.demoparkapi.web.dto.parking.ParkingResponseDto;
import br.com.pbcompass.demoparkapi.web.dto.user.ParkUserResponseDTO;
import br.com.pbcompass.demoparkapi.web.exception.ErrorMessage;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;

@RequiredArgsConstructor
@RestController
@RequestMapping("/api/v1/parking")
public class ParkingController {

    private final ParkingLotService parkingLotService;
    private final ParkingService parkingService;


    @Operation(
            summary = "Operation to check-in",
            description = "Returns the operation invoice. Requires a Bearer token generated by a user with ADMIN privileges",
            security = @SecurityRequirement(name = "security"),
            responses = {
                    @ApiResponse(
                            responseCode = "200",
                            description = "Success on check-in",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ParkUserResponseDTO.class))),
                    @ApiResponse(
                            responseCode = "401",
                            description = "Unauthorized. Requires previous authentication with ADMIN privileges",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
                    @ApiResponse(
                            responseCode = "403",
                            description = "User without permissions, access allowed just to ADMIN users.",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
                    @ApiResponse(
                            responseCode = "404",
                            description = "Possible reasons: <br/>" +
                                    "<ul>" +
                                        "<li>There is no parking spaces available; </li> <br/>" +
                                        "<li>CPF not registered; </li>" +
                                    "</ul>",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
                    @ApiResponse(
                            responseCode = "422",
                            description = "Cannot process the request, invalid entry data format",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class)))
            } )
    @PostMapping("/check-in")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ParkingResponseDto> checkin(@RequestBody @Valid ParkingCreateDto dto){
        Parking parking = ParkingMapper.toParking(dto);
        ParkingResponseDto responseDto = ParkingMapper.toResponseDto(parkingLotService.checkin(parking));
        URI location = ServletUriComponentsBuilder
                .fromCurrentRequestUri()
                .path("/{invoice}")
                .buildAndExpand(parking.getInvoice()).toUri();
        return ResponseEntity.created(location).body(responseDto);
    }

    @Operation(
            summary = "Operation to recover a specific invoice",
            description = "Returns the required invoice. Requires a Bearer token generated by a user with ADMIN privileges",
            security = @SecurityRequirement(name = "security"),
            parameters = @Parameter(in = ParameterIn.PATH, name = "invoice number", description = "the invoice number generated on check-in" ),
            responses = {
                    @ApiResponse(
                            responseCode = "200",
                            description = "Success",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ParkUserResponseDTO.class))),
                    @ApiResponse(
                            responseCode = "401",
                            description = "Unauthorized. Requires previous authentication with ADMIN privileges",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
                    @ApiResponse(
                            responseCode = "403",
                            description = "User without permissions, access allowed just to ADMIN users.",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
                    @ApiResponse(
                            responseCode = "404",
                            description = "Possible reasons: <br/>" +
                                    "<ul>" +
                                    "<li>The invoice number doesn't exists; </li> <br/>" +
                                    "<li>Check-out already done; </li>" +
                                    "</ul>",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
                    @ApiResponse(
                            responseCode = "422",
                            description = "Cannot process the request, invalid entry data format",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class)))
            } )
    @PreAuthorize("hasAnyRole('ADMIN','CLIENT')")
    @GetMapping("/check-in/{invoice}")
    public ResponseEntity<ParkingResponseDto> findByInvoice(@PathVariable String invoice){
        Parking parking = parkingService.findByInvoice(invoice);
        ParkingResponseDto responseDto = ParkingMapper.toResponseDto(parking);
        return ResponseEntity.ok().body(responseDto);
    }


    @Operation(
            summary = "Operation to check-out",
            description = "Returns the operation invoice. Requires a Bearer token generated by a user with ADMIN privileges",
            security = @SecurityRequirement(name = "security"),
            parameters = @Parameter(in = ParameterIn.PATH, name = "invoice number", description = "the invoice number generated on check-in" ),
            responses = {
                    @ApiResponse(
                            responseCode = "200",
                            description = "Success on check-out",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ParkUserResponseDTO.class))),
                    @ApiResponse(
                            responseCode = "401",
                            description = "Unauthorized. Requires previous authentication with ADMIN privileges",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
                    @ApiResponse(
                            responseCode = "403",
                            description = "User without permissions, access allowed just to ADMIN users.",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
                    @ApiResponse(
                            responseCode = "404",
                            description = "Possible reasons: <br/>" +
                                    "<ul>" +
                                    "<li>The invoice number doesn't exists; </li> <br/>" +
                                    "<li>Check-out already done; </li>" +
                                    "</ul>",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class))),
                    @ApiResponse(
                            responseCode = "422",
                            description = "Cannot process the request, invalid entry data format",
                            content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorMessage.class)))
            } )
    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping("/check-out/{invoice}")
    public ResponseEntity<ParkingResponseDto> checkout(@PathVariable String invoice){
        Parking parking = parkingLotService.checkout(invoice);
        ParkingResponseDto responseDto = ParkingMapper.toResponseDto(parking);
        return ResponseEntity.ok().body(responseDto);
    }
}
