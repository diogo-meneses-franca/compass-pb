package br.com.pbcompass.demoparkapi.web.controller;

import br.com.pbcompass.demoparkapi.entity.ParkingSpace;
import br.com.pbcompass.demoparkapi.service.ParkingSpaceService;
import br.com.pbcompass.demoparkapi.web.dto.mapper.ParkingSpaceMapper;
import br.com.pbcompass.demoparkapi.web.dto.parkingspace.ParkingSpaceCreateDto;
import br.com.pbcompass.demoparkapi.web.dto.parkingspace.ParkingSpaceResponseDto;
import br.com.pbcompass.demoparkapi.web.exception.ErrorMessage;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.headers.Header;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;

@RequiredArgsConstructor
@RestController
@RequestMapping("/api/v1/parking-spaces")
public class ParkingSpaceController {

    private final ParkingSpaceService parkingSpaceService;

    @Operation(summary = "Creates a new parking space", description = "Requires a Bearer token generated by a user with ADMIN privileges",
    responses = {
            @ApiResponse(responseCode = "201", description = "Success on creating resource",
                    headers = @Header(name = HttpHeaders.LOCATION, description = "URL to access the created resource")),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "409", description = "Parking space already exists",
                        content = @Content(mediaType = "application/json;chaset=UTF-8",
                        schema = @Schema(implementation = ErrorMessage.class))),
            @ApiResponse(responseCode = "422", description = "Invalid entry data",
                    content = @Content(mediaType = "application/json;chaset=UTF-8",
                            schema = @Schema(implementation = ErrorMessage.class)))
    })
    @PostMapping
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> save(@RequestBody @Valid ParkingSpaceCreateDto dto){
        ParkingSpace parkingSpace = ParkingSpaceMapper.toParkingSpace(dto);
        parkingSpaceService.save(parkingSpace);
        URI location = ServletUriComponentsBuilder
                .fromCurrentRequestUri().path("/{code}")
                .buildAndExpand(parkingSpace.getCode())
                .toUri();
        return ResponseEntity.created(location).build();

    }


    @Operation(summary = "Finds a parking space by code", description = "Requires a Bearer token generated by a user with ADMIN privileges",
            responses = {
                    @ApiResponse(responseCode = "200", description = "Success",
                            content = @Content(mediaType = "application/json;chaset=UTF-8",
                                    schema = @Schema(implementation = ParkingSpaceResponseDto.class))),
                    @ApiResponse(responseCode = "401", description = "Unauthorized"),
                    @ApiResponse(responseCode = "404", description = "Resource not found",
                            content = @Content(mediaType = "application/json;chaset=UTF-8",
                                    schema = @Schema(implementation = ErrorMessage.class)))
            })
    @GetMapping("/{code}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ParkingSpaceResponseDto> findByCode(@PathVariable String code){
        ParkingSpace parkingSpace = parkingSpaceService.findByCode(code);
        ParkingSpaceResponseDto responseDto = ParkingSpaceMapper.toResponseDto(parkingSpace);
        return ResponseEntity.ok().body(responseDto);

    }
}
